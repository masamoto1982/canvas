const Types = {
  NUMBER: 'number',
  BOOLEAN: 'boolean',
  STRING: 'string',
  SYMBOL: 'symbol',
  VECTOR: 'vector',
  NIL: 'nil',
  COMMENT: 'comment',
  UNDEFINED: 'undefined'
};

const ColorTypes = {
  'green': Types.NUMBER,
  'cyan': Types.BOOLEAN,
  'blue': Types.STRING,
  'red': Types.SYMBOL,
  'purple': Types.VECTOR,
  'orange': Types.NIL,
  'yellow': Types.COMMENT,
  'gray': Types.NIL
};

const colorCodes = {
  'red': '#FF4B00',
  'green': '#03AF7A',
  'blue': '#005AFF',
  'cyan': '#4DC4FF',
  'purple': '#9C27B0',
  'orange': '#F6AA00',
  'yellow': '#FFF100',
  'gray': '#9E9E9E'
};

const CONFIG = {
  sensitivity: {
    hitRadius: 15,
    minSwipeDistance: 5,
    debounceTime: 30  // 50から削減
  },
  timing: {
    multiStrokeTimeout: 400,  // 500から削減
    doubleTapDelay: 300
  },
  layout: {
    dotSize: 40,
    dotGap: 20,
    gridRows: 3,
    gridCols: 3
  },
  visual: {
    detectedColor: '#fca5a5',
    feedbackSize: 120,
    feedbackTextSize: 60
  },
  behavior: {
    autoFocus: true,
  },
  recognition: {
    tolerance: 1
  }
};

// 各ドットが各グループで持つ素数
// グループ1(左上): ドット1,2,4,5
// グループ2(右上): ドット2,3,5,6
// グループ3(左下): ドット4,5,7,8
// グループ4(右下): ドット5,6,8,9
const dotGroupPrimes = {
  1: [2, null, null, null],      // グループ1のみ
  2: [3, 5, null, null],          // グループ1,2
  3: [null, 7, null, null],       // グループ2のみ
  4: [11, null, 13, null],        // グループ1,3
  5: [17, 19, 23, 29],            // すべてのグループ
  6: [null, 31, null, 37],        // グループ2,4
  7: [null, null, 41, null],      // グループ3のみ
  8: [null, null, 43, 47],        // グループ3,4
  9: [null, null, null, 53]       // グループ4のみ
};

// 4グループパターンによる文字認識
// [グループ1の積, グループ2の積, グループ3の積, グループ4の積]
const groupPatterns = {
  // 数字
  '1': [[2], [null], [null], [null]],           // ドット1のみ
  '2': [[3], [5], [null], [null]],              // ドット2のみ
  '3': [[null], [7], [null], [null]],           // ドット3のみ
  '4': [[11], [null], [13], [null]],            // ドット4のみ
  '5': [[17], [19], [23], [29]],                // ドット5のみ
  '6': [[null], [31], [null], [37]],            // ドット6のみ
  '7': [[null], [null], [41], [null]],          // ドット7のみ
  '8': [[null], [null], [43], [47]],            // ドット8のみ
  '9': [[null], [null], [null], [53]],          // ドット9のみ
  '0': [[2*3*11*17], [5*7*19*31], [13*23*41*43], [29*37*47*53]], // 外周すべて
  
  // アルファベット - より識別しやすいパターン
  'A': [[2*3], [5*7], [null], [null]],          // 上部
  'B': [[2*11], [5*31], [13*41], [37*47]],      // 左側＋部分的な右
  'C': [[2*11], [null], [13*41], [null]],       // 左側のみ
  'D': [[2*11], [5*7*31], [13*41*43], [37*47*53]], // Dの形
  'E': [[2*11], [null], [13*41], [null]],       // 左側（Cと同じ基本形）
  'F': [[2*11], [null], [null], [null]],        // 左上のみ
  'G': [[2*11], [7], [13*41*43], [47*53]],      // Cに横線追加
  'H': [[2*11], [7*31], [13*41], [47*53]],      // 両側
  'I': [[3], [5*7], [null], [43*47]],           // 中央縦
  'J': [[null], [7], [null], [47*53]],          // 右側下向き
  'K': [[2*11], [7], [13*41], [53]],            // 左側＋斜め
  'L': [[2*11], [null], [13*41], [43]],         // L字
  'M': [[2*3*11], [5*7*31], [13*41], [47*53]],  // M字
  'N': [[2*11], [7], [13*41], [47*53]],         // N字
  'O': [[2*3*11*17], [5*7*19*31], [13*23*41*43], [29*37*47*53]], // 全周
  'P': [[2*3*11], [5*7*31], [13], [null]],      // 上部閉じ
  'Q': [[2*3*11*17], [5*7*19*31], [13*23*41*43], [53]], // Oに尾
  'R': [[2*3*11], [5*7*31], [13*41], [53]],     // Pに斜め線
  'S': [[2*3], [5*7], [23*43], [29*37*47*53]],  // S字
  'T': [[3], [5*7], [null], [null]],            // T字
  'U': [[2*11], [7*31], [13*41*43], [47*53]],   // U字
  'V': [[2*11], [7*31], [41], [47]],            // V字
  'W': [[2*11], [7*31], [13*41*43], [29*37*47*53]], // W字
  'X': [[2], [7], [41], [53]],                  // X字
  'Y': [[2], [7], [23], [29]],                  // Y字
  'Z': [[2*3], [5*7], [41*43], [47*53]],        // Z字
  
  // 記号
  '.': [[null], [null], [null], [53]],          // 右下点
  ',': [[null], [null], [43], [47]],            // 右下カンマ
  '!': [[3], [5], [null], [47]],                // 感嘆符
  '?': [[3], [5*7], [23], [47]],                // 疑問符
  '+': [[3], [5*19], [23*43], [29*47]],         // プラス
  '-': [[null], [19], [23], [null]],            // マイナス
  '*': [[17], [19], [23], [29]],                // アスタリスク（中央）
  '/': [[null], [7], [23], [47]],               // スラッシュ
  '=': [[null], [5*19], [23*43], [null]],       // イコール
  '(': [[3], [null], [null], [43]],             // 左括弧
  ')': [[null], [5], [null], [47]],             // 右括弧
  ':': [[3], [null], [null], [47]],             // コロン
  ';': [[3], [null], [43], [47]],               // セミコロン
  '@': [[2*3*11*17], [5*7*19*31], [23*41], [29*37]],  // アット
  '#': [[3*17], [5*7*19*31], [23*41*43], [29*47]],    // シャープ
  '$': [[2*3], [5*19], [23*43], [37*47*53]],          // ドル
  '%': [[2], [7], [41], [53]],                        // パーセント
  '^': [[2*17], [7*19], [null], [null]],              // キャレット
  '&': [[2*3*17], [5*19], [23*41], [47*53]],          // アンド
  '_': [[null], [null], [41*43], [47*53]],            // アンダースコア
  '{': [[3*17], [null], [23], [43*47]],               // 左中括弧
  '}': [[17], [5*19], [null], [29*47*53]],            // 右中括弧
  '<': [[17], [null], [23], [null]],                  // 小なり
  '>': [[null], [19], [null], [29]],                  // 大なり
  '[': [[2*3], [null], [null], [43*47]],              // 左角括弧
  ']': [[null], [5*7], [null], [47*53]],              // 右角括弧
  '|': [[3], [null], [null], [47]],                   // パイプ
  '~': [[2], [5*7*19], [null], [null]],               // チルダ
};

// パターンを積の配列形式に変換
const letterPatterns = {};
for (const [char, groups] of Object.entries(groupPatterns)) {
  // 各グループの積を計算
  const products = groups.map(group => {
    if (!group || group[0] === null) return 1;
    return group.reduce((acc, val) => acc * (val || 1), 1);
  });
  // 4つの積を組み合わせて一意のキーを作成
  const key = `${products[0]}_${products[1]}_${products[2]}_${products[3]}`;
  letterPatterns[key] = char;
}

const complexPatterns = {};